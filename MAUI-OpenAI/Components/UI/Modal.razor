@inject IPlatformService PlatformService
@inject IImageSaveService ImageSaveService
@inject IJSRuntime JS
@inject IModalService ModalService

<div class="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-75 backdrop-blur-md" @onclick="CloseModal">
    <div class="relative bg-darkblue bg-opacity-80 backdrop-blur-lg rounded-lg overflow-hidden shadow-lg w-full max-w-2xl" @onclick:stopPropagation="true">
        <div class="flex justify-between p-2">
            <div class="flex space-x-2">
                @if (!string.IsNullOrEmpty(ImageSrc))
                {
                    <button class="text-white hover:text-gray-900" @onclick="SaveImage">
                        <i class="@SaveImageIconClass"></i> @SaveImageText
                    </button>
                    <button class="text-white hover:text-gray-900" @onclick="CopyImage">
                        <i class="@CopyImageIconClass"></i> @CopyImageText
                    </button>
                }
            </div>
            <button class="text-white hover:text-gray-900" @onclick="CloseModal">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="p-4">
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="text-red-500">@ErrorMessage</div>
            }
            else
            {
                @if (!string.IsNullOrEmpty(ImageSrc))
                {
                    <img src="@ImageSrc" alt="Modal Image" class="w-full h-auto rounded-lg" />
                }

                @if (!string.IsNullOrEmpty(MarkupContent))
                {
                    <div class="markdown-content">
                        @((MarkupString)MarkupContent)
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? ImageSrc { get; set; }

    [Parameter]
    public string? MarkupContent { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }
    [Parameter]
    public EventCallback<string> OnError { get; set; }

    private string ErrorMessage { get; set; } = string.Empty;
    private bool isImageSaved = false;
    private bool isImageCopied = false;
    private bool isSaveCancelled = false;

    private string SaveImageIconClass => isImageSaved ? "fas fa-check text-green-500 animate-iconChange" : isSaveCancelled ? "fas fa-times text-red-500 animate-iconChange" : "fas fa-save animate-iconChange";
    private string CopyImageIconClass => isImageCopied ? "fas fa-check text-green-500 animate-iconChange" : "fas fa-copy animate-iconChange";
    private string SaveImageText => isImageSaved ? "Image Saved" : isSaveCancelled ? "Save Cancelled" : "Save Image";
    private string CopyImageText => isImageCopied ? "Image Copied" : "Copy Image";

    protected override void OnInitialized()
    {
        platformName = PlatformService.GetPlatform(OnError);
    }

    private string platformName { get; set; } = string.Empty;

    private async Task CloseModal()
    {
        try
        {
            if (OnClose.HasDelegate)
            {
                await OnClose.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            HandleError($"Error closing modal: {ex.Message}");
        }
    }

    private void HandleError(string message)
    {
        ErrorMessage = message;
        if (OnError.HasDelegate)
        {
            OnError.InvokeAsync(message);
        }
        StateHasChanged();
    }

    private async Task SaveImage()
    {
        var saveResult = await ModalService.SaveImageAsync(ImageSrc, ImageSaveService, platformName);

        if (saveResult == "Cancelled")
        {
            isSaveCancelled = true;
        }
        else if (saveResult == "Saved")
        {
            isImageSaved = true;
        }

        StateHasChanged();

        await Task.Delay(2000);
        isImageSaved = false;
        isSaveCancelled = false;
        StateHasChanged();
    }

    private async Task CopyImage()
    {
        await ModalService.CopyImageAsync(ImageSrc, JS, EventCallback.Factory.Create<string>(this, HandleError));
        isImageCopied = true;
        StateHasChanged();

        await Task.Delay(2000);
        isImageCopied = false;
        StateHasChanged();
    }
}