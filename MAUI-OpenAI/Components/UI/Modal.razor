@inject IPlatformService PlatformService
@inject CommunityToolkit.Maui.Storage.IFileSaver FileSaver
@using CommunityToolkit.Maui.Storage
@using Microsoft.Maui.Storage

<div class="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-75 backdrop-blur-md" @onclick="CloseModal">
    <div class="relative bg-darkblue bg-opacity-80 backdrop-blur-lg rounded-lg overflow-hidden shadow-lg w-full max-w-2xl" @onclick:stopPropagation="true">
        <div class="flex justify-between p-2">
            <div class="flex space-x-2">
                <button class="text-white hover:text-gray-900" @onclick="SaveImage">
                    <i class="fas fa-save"></i> Save Image
                </button>
            </div>
            <button class="text-white hover:text-gray-900" @onclick="CloseModal">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="p-4">
            @if (string.IsNullOrEmpty(ErrorMessage))
            {
                <img src="@ImageSrc" alt="Modal Image" class="w-full h-auto rounded-lg" />
            }
            else
            {
                <div class="text-red-500">@ErrorMessage</div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? ImageSrc { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }
    [Parameter]
    public EventCallback<string> OnError { get; set; }
    [Parameter]
    public EventCallback<string> OnSuccess { get; set; }

    private string ErrorMessage { get; set; } = string.Empty;
    private string Platform { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        Platform = PlatformService.GetPlatform();
    }

    private async Task CloseModal()
    {
        try
        {
            if (OnClose.HasDelegate)
            {
                await OnClose.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            HandleError($"Error closing modal: {ex.Message}");
        }
    }

    private void HandleError(string message)
    {
        ErrorMessage = message;
        if (OnError.HasDelegate)
        {
            OnError.InvokeAsync(message);
        }
        StateHasChanged();
    }

    private async Task SaveImage()
    {
        try
        {
            if (!string.IsNullOrEmpty(ImageSrc))
            {
                var base64Data = ImageSrc.Substring(ImageSrc.IndexOf(',') + 1);
                var imageBytes = Convert.FromBase64String(base64Data);

                using var stream = new MemoryStream(imageBytes);
                var fileName = $"image_{DateTime.Now:yyyyMMdd_HHmmss}.png";
                var result = await FileSaver.SaveAsync(fileName, stream, default);

                if (result.IsSuccessful)
                {
                    if (OnSuccess.HasDelegate)
                    {
                        await OnSuccess.InvokeAsync("Image saved successfully.");
                    }
                }
                else
                {
                    HandleError($"Error saving image: {result.Exception?.Message ?? "Unknown error"}");
                }
            }
            else
            {
                HandleError("No image to save.");
            }
        }
        catch (Exception ex)
        {
            HandleError($"Error saving image: {ex.Message}");
        }
    }
}
