<div class="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-75 backdrop-blur-md" @onclick="CloseModal">
    <div class="relative bg-white bg-opacity-80 backdrop-blur-lg rounded-lg overflow-hidden shadow-lg w-full max-w-2xl" @onclick:stopPropagation="true">
        <div class="flex justify-end p-2">
            <button class="text-gray-700 hover:text-gray-900" @onclick="CloseModal">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="p-4">
            @if (string.IsNullOrEmpty(ErrorMessage))
            {
                <img src="@ImageSrc" alt="Modal Image" class="w-full h-auto rounded-lg" />
            }
            else
            {
                <div class="text-red-500">@ErrorMessage</div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? ImageSrc { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }
    [Parameter]
    public EventCallback<string> OnError { get; set; }

    private string ErrorMessage { get; set; } = string.Empty;

    private async Task CloseModal()
    {
        try
        {
            if (OnClose.HasDelegate)
            {
                await OnClose.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            HandleError($"Error closing modal: {ex.Message}");
        }
    }

    private void HandleError(string message)
    {
        ErrorMessage = message;
        if (OnError.HasDelegate)
        {
            OnError.InvokeAsync(message);
        }
        StateHasChanged();
    }
}
