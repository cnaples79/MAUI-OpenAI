@inject IGetAppearanceService GetAppearanceService
@inject IOpenAIService OpenAIService
@inject IBaseService BaseService
@inject IInputStateService InputStateService

@if (!string.IsNullOrEmpty(Role) && !string.IsNullOrEmpty(Description))
{
    <button
        @onclick="HandleGetAppearance"
        disabled="@InputDisabled"
        class="btn btn-base btn-primary"
    >
        Get Appearance
    </button>
}

@code {
    [Parameter]
    public string? Role { get; set; }
    [Parameter]
    public string? Description { get; set; }
    [Parameter]
    public EventCallback<byte[]> OnImageGenerated { get; set; }
    [Parameter]
    public EventCallback<string> OnError { get; set; }
    [Parameter]
    public EventCallback<bool> OnLoading { get; set; }
    [Parameter]
    public bool IsAppearanceGenerating { get; set; } = false;
    [Parameter]
    public bool IsSendingMessage { get; set; } = false;
    [Parameter]
    public bool IsImageLoading { get; set; } = false;
    [Parameter]
    public bool IsAppearanceLoading { get; set; } = false;

    private bool InputDisabled => InputStateService.IsInputDisabled(IsSendingMessage, IsImageLoading, IsAppearanceLoading, 0, 0);

    private async Task HandleGetAppearance()
    {
        if (!string.IsNullOrEmpty(Role) && !string.IsNullOrEmpty(Description))
        {
            var promptForDalle = $"Given this role and description, respond with ONLY a prompt for DALLE-3 to create an image of the role's appearance. Do not name them. Do not include any additional text or explanation. Role: {Role}. Description: {Description}.";
            try
            {
                await OnLoading.InvokeAsync(true);

                string dallePrompt = await GetAppearanceService.GeneratePromptAsync(promptForDalle, OpenAIService, OnError);

                if (!string.IsNullOrEmpty(dallePrompt))
                {
                    await OpenAIService.GenerateImageAsync(
                        dallePrompt,
                        EventCallback.Factory.Create<byte[]>(this, HandleImageGenerated),
                        EventCallback.Factory.Create<string>(this, HandleError)
                    );
                }
                else
                {
                    await BaseService.HandleErrorAsync("Failed to generate DALLE prompt.", OnError);
                }
            }
            catch (Exception ex)
            {
                await BaseService.HandleErrorAsync($"Error generating appearance: {ex.Message}", OnError);
            }
            finally
            {
                await OnLoading.InvokeAsync(false);
            }
        }
    }

    private async Task HandleImageGenerated(byte[] imageBytes)
    {
        await OnImageGenerated.InvokeAsync(imageBytes);
    }

    private async Task HandleError(string error)
    {
        await BaseService.HandleErrorAsync(error, OnError);
    }
}