@inject IJSRuntime JS

<div class="relative" @ref="comboBoxRef">
    <input
        type="text"
        @bind="SearchText"
        @bind:event="oninput"
        @onfocus="ShowDropdown"
        @onkeydown="HandleKeyDown"
        @onclick="ShowDropdown"
        disabled="@InputDisabled"
        class="p-2 rounded border border-gray focus:outline-none bg-input text-brightWhite w-full disabled:cursor-not-allowed disabled:opacity-50"
        placeholder="Select Role"
    />
    @if (DropdownVisible && FilteredItems.Any())
    {
        <ul class="absolute z-10 mt-1 bg-darkblue border border-gray rounded w-full max-h-80 overflow-y-auto">
            @foreach (var item in FilteredItems)
            {
                <li
                    class="p-2 cursor-pointer hover:bg-gray-700 text-brightWhite"
                    @onclick="() => SelectItem(item)"
                >
                    @item
                </li>
            }
        </ul>
    }
</div>

@code {
    [Parameter]
    public List<string> Items { get; set; } = new List<string>();

    [Parameter]
    public EventCallback<string> OnItemSelected { get; set; }
    [Parameter]
    public bool IsSendingMessage { get; set; } = false;
    [Parameter]
    public bool IsGeneratingImage { get; set; } = false;
    [Parameter]
    public bool IsImageLoading { get; set; } = false;

    private bool InputDisabled => IsSendingMessage || IsGeneratingImage || IsImageLoading;

    private string SearchText { get; set; } = string.Empty;
    private bool DropdownVisible { get; set; } = false;
    private ElementReference comboBoxRef;

    private List<string> FilteredItems => string.IsNullOrWhiteSpace(SearchText)
        ? Items
        : Items.Where(item => item.Contains(SearchText, StringComparison.OrdinalIgnoreCase)).ToList();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("registerOutsideClick", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task OnOutsideClick(double clientX, double clientY)
    {
        var rect = await JS.InvokeAsync<BoundingClientRect>("getBoundingClientRect", comboBoxRef);
        if (clientX < rect.Left || clientX > rect.Right || clientY < rect.Top || clientY > rect.Bottom)
        {
            HideDropdown();
        }
    }

    private void ShowDropdown()
    {
        DropdownVisible = true;
    }

    private void HideDropdown()
    {
        DropdownVisible = false;
        StateHasChanged();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && FilteredItems.Any())
        {
            await SelectItem(FilteredItems.First());
        }
    }

    private async Task SelectItem(string item)
    {
        SearchText = item;
        DropdownVisible = false;
        await OnItemSelected.InvokeAsync(item);
    }

    public async Task ClearAsync()
    {
        SearchText = string.Empty;
        DropdownVisible = false;
        await Task.CompletedTask;
    }

    private class BoundingClientRect
    {
        public double Left { get; set; }
        public double Right { get; set; }
        public double Top { get; set; }
        public double Bottom { get; set; }
    }
}