@using Microsoft.Extensions.Logging
@inject IPlatformService PlatformService

<div class="@GetFormContainerCssClass() relative">
    <form @onsubmit="HandleSubmit" class="flex w-full relative">
        <textarea
            @bind="UserMessage"
            @bind:event="oninput"
            @onkeydown="HandleKeyDown"
            @onfocus="HandleInputFocus"
            @onblur="HandleInputBlur"
            disabled="@IsInputDisabled"
            placeholder="Type your message or prompt here"
            class="flex-grow p-4 px-10 rounded border border-gray focus:outline-none bg-input text-brightWhite h-28 resize-none disabled:cursor-not-allowed disabled:opacity-50"
        />
        <button
            @onclick="ClearMessages"
            type="button"
            disabled="@IsInputDisabled"
            class="absolute left-2 bottom-2 text-brightWhite p-2 rounded-full hover:text-brightRed focus:outline-none disabled:cursor-not-allowed disabled:opacity-50"
        >
            <i class="fas fa-trash"></i>
        </button>
        <button
            @onclick="ToggleImageGeneration"
            type="button"
            disabled="@IsInputDisabled"
            class="absolute right-2 top-2 text-brightWhite p-2 rounded-full hover:text-brightBlue focus:outline-none disabled:cursor-not-allowed disabled:opacity-50"
        >
            @if (IsGeneratingImage)
            {
                <i class="fas fa-image"></i>
            }
            else
            {
                <i class="fas fa-envelope"></i>
            }
        </button>
        <button
            type="submit"
            disabled="@(IsInputDisabled || string.IsNullOrWhiteSpace(UserMessage))"
            class="absolute right-2 bottom-2 text-brightWhite p-2 rounded-full hover:text-brightBlue focus:outline-none disabled:cursor-not-allowed disabled:opacity-50"
        >
            <i class="fa-solid fa-paper-plane"></i>
        </button>
    </form>
</div>

@code {
    [Parameter]
    public string? UserMessage { get; set; }
    [Parameter]
    public bool IsSending { get; set; }
    [Parameter]
    public bool IsGeneratingImage { get; set; }
    [Parameter]
    public bool IsLoading { get; set; } = false; // Ensure this is false by default
    [Parameter]
    public EventCallback<string> OnSendMessage { get; set; }
    [Parameter]
    public EventCallback<bool> OnToggleImageGeneration { get; set; }
    [Parameter]
    public EventCallback OnClearMessages { get; set; }
    [Parameter]
    public EventCallback<string> OnError { get; set; }

    private bool isFocused = false;
    private string platform = "";

    protected override void OnInitialized()
    {
        try
        {
            platform = PlatformService.GetPlatform();
        }
        catch (Exception ex)
        {
            platform = "Unknown Platform";
            HandleError($"Failed to get platform information: {ex.Message}");
        }
    }

    private bool IsInputDisabled => IsSending || IsLoading;

    private async Task HandleSubmit()
    {
        try
        {
            if (OnSendMessage.HasDelegate)
            {
                await OnSendMessage.InvokeAsync(UserMessage);
                UserMessage = string.Empty;
                HandleError("");
            }
            else
            {
                HandleError("Message sending function is not configured.");
            }
        }
        catch (Exception ex)
        {
            HandleError($"Error sending message: {ex.Message}");
        }
    }

    private void ClearMessages()
    {
        try
        {
            if (OnClearMessages.HasDelegate)
            {
                OnClearMessages.InvokeAsync();
                HandleError("");
            }
            else
            {
                HandleError("Clear messages function is not configured.");
            }
        }
        catch (Exception ex)
        {
            HandleError($"Error clearing messages: {ex.Message}");
        }
    }

    private async Task ToggleImageGeneration()
    {
        try
        {
            IsGeneratingImage = !IsGeneratingImage;
            if (OnToggleImageGeneration.HasDelegate)
            {
                await OnToggleImageGeneration.InvokeAsync(IsGeneratingImage);
                HandleError("");
            }
            else
            {
                HandleError("Image generation toggle function is not configured.");
            }
        }
        catch (Exception ex)
        {
            HandleError($"Error toggling image generation: {ex.Message}");
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs args)
    {
        try
        {
            if (args.Key == "Enter" && !args.ShiftKey && !IsSending)
            {
                await HandleSubmit();
            }
        }
        catch (Exception ex)
        {
            HandleError($"Error handling key down event: {ex.Message}");
        }
    }

    private void HandleInputFocus()
    {
        try
        {
            isFocused = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            HandleError($"Error handling input focus: {ex.Message}");
        }
    }

    private void HandleInputBlur()
    {
        try
        {
            isFocused = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            HandleError($"Error handling input blur: {ex.Message}");
        }
    }

    private string GetFormContainerCssClass()
    {
        try
        {
            var baseClass = "p-4 shadow-md";
            return isFocused && (platform == "iOS" || platform == "Android") ? $"{baseClass} mb-64" : baseClass;
        }
        catch (Exception ex)
        {
            HandleError($"Error generating CSS class: {ex.Message}");
            return "p-4 shadow-md";
        }
    }

    private void HandleError(string message)
    {
        if (OnError.HasDelegate)
        {
            OnError.InvokeAsync(message);
        }
    }
}
