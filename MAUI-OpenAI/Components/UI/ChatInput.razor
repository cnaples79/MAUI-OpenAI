@inject IPlatformService PlatformService
@inject ITokenizerService TokenizerService
@inject IJSRuntime JS

<div class="@GetFormContainerCssClass() relative">
    <form @onsubmit="HandleSubmitAsync" class="flex w-full relative">
        <div class="absolute left-1 top-1 p-1 bg-opacity-75 backdrop-blur-md rounded">
            <span class="@(TokenCount >= MaxTokens ? "text-red" : "text-brightWhite")">@TokenCount / @MaxTokens Tokens</span>
        </div>
        <textarea
            @ref="textAreaRef"
            @bind="UserMessage"
            @oninput="HandleInput"
            @onfocus="HandleInputFocus"
            @onblur="HandleInputBlur"
            disabled="@IsInputDisabled"
            placeholder="Type your message or prompt here"
            class="flex-grow p-4 pt-10 px-10 rounded border border-gray focus:outline-none bg-input text-brightWhite h-28 resize-none disabled:cursor-not-allowed disabled:opacity-50"
            maxlength="@(MaxTokens * CharactersPerToken)"
        ></textarea>
        <button
            @onclick="ClearMessagesAsync"
            type="button"
            disabled="@IsInputDisabled"
            class="absolute left-2 bottom-2 text-brightWhite p-2 rounded-full hover:text-brightRed focus:outline-none disabled:cursor-not-allowed disabled:opacity-50"
        >
            <i class="fas fa-trash"></i>
        </button>
        <button
            @onclick="ToggleImageGenerationAsync"
            type="button"
            disabled="@IsInputDisabled"
            class="absolute right-2 top-2 text-brightWhite p-2 rounded-full hover:text-brightBlue focus:outline-none disabled:cursor-not-allowed disabled:opacity-50"
        >
            @if (IsGeneratingImage)
            {
                <i class="fas fa-image"></i>
            }
            else
            {
                <i class="fas fa-envelope"></i>
            }
        </button>
        <button
            type="submit"
            disabled="@(IsInputDisabled || string.IsNullOrWhiteSpace(UserMessage))"
            class="absolute right-2 bottom-2 text-brightWhite p-2 rounded-full hover:text-brightBlue focus:outline-none disabled:cursor-not-allowed disabled:opacity-50"
        >
            <i class="fa-solid fa-paper-plane"></i>
        </button>
    </form>
</div>

@code {
    private ElementReference textAreaRef;
    private bool shouldRegainFocus = false;
    private bool isFocused = false;
    private string platform = "";

    [Parameter]
    public string? UserMessage { get; set; }
    [Parameter]
    public bool IsSending { get; set; }
    [Parameter]
    public bool IsGeneratingImage { get; set; }
    [Parameter]
    public bool IsImageLoading { get; set; } = false;
    [Parameter]
    public int TokenCount { get; set; }
    [Parameter]
    public int MaxTokens { get; set; }
    [Parameter]
    public double CharactersPerToken { get; set; }
    [Parameter]
    public EventCallback<string> OnSendMessage { get; set; }
    [Parameter]
    public EventCallback<bool> OnToggleImageGeneration { get; set; }
    [Parameter]
    public EventCallback OnClearMessages { get; set; }
    [Parameter]
    public EventCallback<string> OnError { get; set; }

    protected override void OnInitialized()
    {
        try
        {
            platform = PlatformService.GetPlatform();
        }
        catch (Exception ex)
        {
            HandleError($"Failed to get platform information: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldRegainFocus && !isFocused && !IsSending && !IsImageLoading)
        {
            await FocusTextAreaAsync();
        }
    }

    private bool IsInputDisabled => IsSending || IsImageLoading || TokenCount > MaxTokens;

    private async Task HandleSubmitAsync()
    {
        try
        {
            if (OnSendMessage.HasDelegate)
            {
                await OnSendMessage.InvokeAsync(UserMessage ?? string.Empty);
                await ClearInputAsync();
            }
            else
            {
                HandleError("Message sending function is not configured.");
            }
        }
        catch (Exception ex)
        {
            HandleError($"Error sending message: {ex.Message}");
        }
    }

    private async Task ClearMessagesAsync()
    {
        try
        {
            if (OnClearMessages.HasDelegate)
            {
                await OnClearMessages.InvokeAsync();
                await ClearInputAsync();
            }
            else
            {
                HandleError("Clear messages function is not configured.");
            }
        }
        catch (Exception ex)
        {
            HandleError($"Error clearing messages: {ex.Message}");
        }
    }

    private async Task ClearInputAsync()
    {
        UserMessage = string.Empty;
        TokenCount = 0;
        HandleError("");
        shouldRegainFocus = true;
        StateHasChanged();
    }

    private async Task ToggleImageGenerationAsync()
    {
        try
        {
            IsGeneratingImage = !IsGeneratingImage;
            if (OnToggleImageGeneration.HasDelegate)
            {
                await OnToggleImageGeneration.InvokeAsync(IsGeneratingImage);
            }
            else
            {
                HandleError("Image generation toggle function is not configured.");
            }
        }
        catch (Exception ex)
        {
            HandleError($"Error toggling image generation: {ex.Message}");
        }
    }

    private void HandleInputFocus()
    {
        isFocused = true;
        shouldRegainFocus = false;
        StateHasChanged();
    }

    private void HandleInputBlur()
    {
        isFocused = false;
        StateHasChanged();
    }

    private string GetFormContainerCssClass()
    {
        var baseClass = "p-4 shadow-md";
        return isFocused && (platform == "iOS" || platform == "Android") ? $"{baseClass} mb-64" : baseClass;
    }

    private void HandleError(string message)
    {
        if (OnError.HasDelegate)
        {
            OnError.InvokeAsync(message);
        }
    }

    private void HandleInput(ChangeEventArgs e)
    {
        UserMessage = e.Value.ToString();
        TokenCount = TokenizerService.EstimateTokenCount(UserMessage);
    }

    private async Task FocusTextAreaAsync()
    {
        await JS.InvokeVoidAsync("focusElement", textAreaRef);
    }
}