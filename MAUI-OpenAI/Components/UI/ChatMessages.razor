@inject IJSRuntime JS

<div id="chatContainer" class="flex-grow p-4 overflow-auto">
    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="my-2 p-2 rounded-lg w-fit max-w-xl md:max-w-lg sm-max-w-md bg-red text-brightWhite">
            @ErrorMessage
        </div>
    }
    @foreach (var chat in ChatMessageList)
    {
        <div class="my-2 p-2 rounded-lg w-fit max-w-xl md-max-w-lg sm-max-w-md @GetMessageCssClass(chat.Role)">
            @if (chat.IsImage)
            {
                @if (chat.IsImageLoading)
                {
                    <div class="w-40 h-30 bg-gray-300 rounded-lg flex items-center justify-center">
                        <i class="fa fa-spinner custom-spin text-4xl text-gray-600"></i>
                    </div>
                }
                else
                {
                    <img src="data:image/png;base64,@chat.Message" alt="Generated Image" class="max-w-full h-auto rounded-lg cursor-pointer" @onclick='() => HandleImageClick("data:image/png;base64," + chat.Message)' />
                }
            }
            else
            {
                @if (!string.IsNullOrEmpty(chat.HtmlContent))
                {
                    <div class="markdown-content">
                        @((MarkupString)chat.HtmlContent)
                    </div>
                }
                else
                {
                    <p>
                        @chat.Message
                    </p>
                }
            }
        </div>
    }
    @if (IsImageLoading)
    {
        <div class="my-2 p-2 rounded-lg w-fit max-w-xl md-max-w-lg sm-max-w-md bg-green text-brightWhite self-start mr-auto text-left">
            <div class="w-40 h-30 bg-gray-300 rounded-lg flex items-center justify-center">
                <i class="fa fa-spinner custom-spin text-4xl text-gray-600"></i>
            </div>
        </div>
    }
    @if (IsAppearanceLoading)
    {
        <div class="my-2 p-2 rounded-lg w-fit max-w-xl md-max-w-lg sm-max-w-md bg-yellow text-brightWhite self-start mr-auto text-left">
            <div class="w-40 h-30 bg-gray-300 rounded-lg flex items-center justify-center">
                <i class="fa fa-spinner custom-spin text-4xl text-gray-600"></i>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public List<ChatMessageModel> ChatMessageList { get; set; } = new List<ChatMessageModel>();

    [Parameter]
    public string ErrorMessage { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> OnImageClick { get; set; }
    [Parameter]
    public EventCallback<string> OnError { get; set; }

    [Parameter]
    public bool IsImageLoading { get; set; }
    [Parameter]
    public bool IsAppearanceLoading { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("scrollToBottom", "chatContainer");
    }

    private string GetMessageCssClass(string role)
    {
        try
        {
            return role switch
            {
                "user" => "bg-blue text-brightWhite self-end ml-auto text-right",
                "assistant" => "bg-green text-brightWhite self-start mr-auto text-left",
                "error" => "bg-red text-brightWhite self-start mr-auto text-left",
                "success" => "bg-brightGreen text-brightWhite self-start mr-auto text-left",
                _ => "bg-gray text-brightWhite self-start mr-auto text-left"
            };
        }
        catch (Exception ex)
        {
            HandleError($"Error generating CSS class: {ex.Message}");
            return "bg-gray text-brightWhite self-start mr-auto text-left";
        }
    }

    private async Task HandleImageClick(string imageSrc)
    {
        try
        {
            if (OnImageClick.HasDelegate)
            {
                await OnImageClick.InvokeAsync(imageSrc);
            }
            else
            {
                HandleError("Image click handler is not configured.");
            }
        }
        catch (Exception ex)
        {
            HandleError($"Error handling image click: {ex.Message}");
        }
    }

    private void HandleError(string message)
    {
        if (OnError.HasDelegate)
        {
            OnError.InvokeAsync(message);
        }
    }
}