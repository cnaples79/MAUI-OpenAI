@using MAUI_OpenAI.Data
@using MAUI_OpenAI.Models
@inject IRoleSelectorService RoleSelectorService

<div class="mb-4 flex gap-4">
    <ComboBox
        Items="GetSortedRoles()"
        OnItemSelected="HandleRoleChange"
        @ref="comboBoxRef"
        InputDisabled="@inputDisabled"
        OnClear="HandleClear"
    />
    @if (!string.IsNullOrEmpty(selectedRole))
    {
        <GetAppearance
            Role="@selectedRole"
            Description="@RolePrompts.Roles[selectedRole]"
            OnImageGenerated="HandleImageGenerated"
            OnError="HandleError"
            OnLoading="HandleLoading"
            IsAppearanceGenerating="@isAppearanceGenerating"
            IsSendingMessage="IsSendingMessage"
            IsImageLoading="IsImageLoading"
        />
    }
</div>

@code {
    [Parameter]
    public EventCallback<string> OnRoleSelected { get; set; }
    [Parameter]
    public EventCallback<byte[]> OnImageGenerated { get; set; }
    [Parameter]
    public EventCallback<string> OnError { get; set; }
    [Parameter]
    public EventCallback<bool> OnLoading { get; set; }
    [Parameter]
    public bool IsSendingMessage { get; set; } = false;
    [Parameter]
    public bool IsImageLoading { get; set; } = false;
    [Parameter]
    public bool IsAppearanceLoading { get; set; } = false;
    [Parameter]
    public List<ChatMessageModel> ChatMessageList { get; set; } = new List<ChatMessageModel>();

    private bool inputDisabled => isAppearanceGenerating || IsSendingMessage || IsImageLoading;
    private string selectedRole = "";
    private bool isAppearanceGenerating = false;
    private ComboBox? comboBoxRef;

    private List<string> GetSortedRoles()
    {
        return RolePrompts.Roles.Keys.ToList().OrderBy(role => role).ToList();
    }

    private async Task HandleRoleChange(string value)
    {
        selectedRole = value;
        await RoleSelectorService.HandleRoleChangeAsync(value, OnRoleSelected);
    }

    private async Task HandleClear()
    {
        selectedRole = "";
        StateHasChanged();
    }

    private async Task HandleImageGenerated(byte[] imageBytes)
    {
        isAppearanceGenerating = false;
        await RoleSelectorService.HandleImageGeneratedAsync(imageBytes, OnImageGenerated);
        var chatMessage = new ChatMessageModel(Convert.ToBase64String(imageBytes), "assistant", isImage: true);
        ChatMessageList.Add(chatMessage);
        StateHasChanged();
    }

    private async Task HandleError(string error)
    {
        isAppearanceGenerating = false;
        await RoleSelectorService.HandleErrorAsync(error, OnError);
    }

    private async Task HandleLoading(bool loading)
    {
        isAppearanceGenerating = loading;
        await RoleSelectorService.HandleLoadingAsync(loading, OnLoading);
    }

    public async Task ClearRoleAsync()
    {
        selectedRole = "";
        if (comboBoxRef != null)
        {
            await comboBoxRef.ClearAsync();
        }
        StateHasChanged();
    }
}