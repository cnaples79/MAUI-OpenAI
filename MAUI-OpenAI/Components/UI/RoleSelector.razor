@using MAUI_OpenAI.Data
@using MAUI_OpenAI.Models

<div class="mb-4 flex gap-4">
    <ComboBox
        IsAppearanceLoading="@isAppearanceLoading"
        IsSending="@IsSending"
        Items="RolePrompts.Roles.Keys.ToList()"
        OnItemSelected="HandleRoleChange"
    />
    @if (!string.IsNullOrEmpty(selectedRole))
    {
        <GetAppearance
            Role="@selectedRole"
            Description="@RolePrompts.Roles[selectedRole]"
            IsAppearanceLoading="@isAppearanceLoading"
            IsSending="@IsSending"
            OnImageGenerated="HandleImageGenerated"
            OnError="HandleError"
            OnLoading="HandleLoading"
        />
    }
</div>

@code {
    [Parameter]
    public EventCallback<string> OnRoleSelected { get; set; }
    [Parameter]
    public EventCallback<byte[]> OnImageGenerated { get; set; }
    [Parameter]
    public EventCallback<string> OnError { get; set; }
    [Parameter]
    public EventCallback<bool> OnLoading { get; set; }
    [Parameter]
    public bool IsImageLoading { get; set; } = false;
    [Parameter]
    public bool IsSending { get; set; } = false;

    private string selectedRole = "";
    private bool isAppearanceLoading = false;

    private async Task HandleRoleChange(string value)
    {
        selectedRole = value;
        if (OnRoleSelected.HasDelegate && RolePrompts.Roles.TryGetValue(selectedRole, out var prompt))
        {
            await OnRoleSelected.InvokeAsync(prompt);
        }
    }

    private async Task HandleImageGenerated(byte[] imageBytes)
    {
        isAppearanceLoading = false;
        if (OnImageGenerated.HasDelegate)
        {
            await OnImageGenerated.InvokeAsync(imageBytes);
        }
    }

    private async Task HandleError(string error)
    {
        isAppearanceLoading = false;
        if (OnError.HasDelegate)
        {
            await OnError.InvokeAsync(error);
        }
    }

    private async Task HandleLoading(bool loading)
    {
        isAppearanceLoading = loading;
        if (OnLoading.HasDelegate)
        {
            await OnLoading.InvokeAsync(loading);
        }
    }
}
