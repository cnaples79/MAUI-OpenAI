@page "/"
@using MAUI_OpenAI.Models
@using MAUI_OpenAI.Services
@inject IOpenAIService OpenAIService
@inject IPlatformService PlatformService

<div class="flex flex-col h-full bg-backdrop text-brightWhite relative">
    <div class="flex-grow p-4 overflow-auto">
        @foreach (var chat in chats)
        {
            <div class="my-2 p-2 rounded-lg max-w-lg md:max-w-md sm:max-w-sm @GetMessageCssClass(chat.Role)">
                <p>@chat.Message</p>
            </div>
        }
    </div>

    <div class="@GetFormContainerCssClass() relative">
        <form class="flex w-full relative" @onsubmit="HandleSubmit">
            <textarea @bind="userMessage" @bind:event="oninput" placeholder="Type your message here"
                @onfocus="HandleInputFocus" @onblur="HandleInputBlur"
                @onkeydown="HandleKeyDown"
                class="flex-grow p-4 px-16 rounded border border-gray focus:outline-none focus:ring focus:border-blue bg-input text-brightWhite h-20 resize-none pr-14"
                disabled="@isSending"></textarea>
            <button type="button" @onclick="ClearMessages" class="absolute left-2 bottom-2 text-brightWhite p-2 rounded-full hover:text-brightRed focus:outline-none focus:ring focus:ring-red">
                <i class="fas fa-trash"></i>
            </button>
            <button type="submit" class="absolute right-2 bottom-2 text-brightWhite p-2 rounded-full hover:text-brightBlue focus:outline-none focus:ring focus:ring-blue @(isSending || string.IsNullOrWhiteSpace(userMessage) ? "disabled-button" : "") disabled:opacity-50"
                    disabled="@(isSending || string.IsNullOrWhiteSpace(userMessage))">
                <i class="fas fa-paper-plane"></i>
            </button>
        </form>
    </div>
</div>

@code {
    private string userMessage = "";
    private bool isSending = false;
    private List<ChatMessageModel> chats = new List<ChatMessageModel>();
    private List<ChatMessageModel> conversation = new List<ChatMessageModel>();
    private bool isInputFocused = false;
    private string platform = "";

    protected override void OnInitialized()
    {
        platform = PlatformService.GetPlatform();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userMessage))
            return;

        var tempUserMessage = userMessage;
        userMessage = string.Empty; // Clear the input field immediately
        isSending = true;
        StateHasChanged();

        var userChatMessage = new ChatMessageModel(tempUserMessage, "user");
        chats.Add(userChatMessage); // Add user message to chats
        conversation.Add(userChatMessage); // Keep the full conversation context

        await OpenAIService.GetChatCompletionStreamingAsync(conversation, tempUserMessage, UpdateResponse);

        isSending = false;
        StateHasChanged();
    }

    private void UpdateResponse(string update)
    {
        if (chats.LastOrDefault()?.Role == "assistant")
        {
            chats.Last().Message += update;
        }
        else
        {
            var newMessage = new ChatMessageModel(update, "assistant");
            chats.Add(newMessage);
            conversation.Add(newMessage);
        }
        InvokeAsync(StateHasChanged);
    }

    private void ClearMessages()
    {
        chats.Clear();
        StateHasChanged();
    }

    private async Task HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && !isSending)
        {
            await SendMessage();
        }
    }

    private async Task HandleSubmit()
    {
        await SendMessage();
    }

    private void HandleInputFocus()
    {
        isInputFocused = true;
        StateHasChanged();
    }

    private void HandleInputBlur()
    {
        isInputFocused = false;
        StateHasChanged();
    }

    private string GetMessageCssClass(string role)
    {
        return role == "user" ? "bg-blue text-brightWhite self-end ml-auto text-right" : "bg-green text-brightWhite self-start mr-auto text-left";
    }

    private string GetFormContainerCssClass()
    {
        var baseClass = "p-4 shadow-md";
        return isInputFocused && (platform == "iOS" || platform == "Android") ? $"{baseClass} mb-64" : baseClass;
    }
}
