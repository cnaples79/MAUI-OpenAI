@page "/"
@inject IOpenAIService OpenAIService
@inject IMarkdownService MarkdownService

<div class="flex flex-col h-full bg-backdrop text-brightWhite relative">
    <RoleSelector
        OnRoleSelected="HandleRoleSelected"
        OnImageGenerated="HandleImageGenerated"
        OnError="HandleError"
        OnLoading="HandleLoading"
    />
    <ChatMessages
        Chats="chats"
        ErrorMessage="@errorMessage"
        OnImageClick="OpenModal"
        OnError="HandleError"
        IsLoading="@isImageLoading"
    />
    <ChatInput
        UserMessage="@userMessage"
        IsSending="@isSending"
        IsGeneratingImage="@isGeneratingImage"
        IsLoading="@isImageLoading"
        OnSendMessage="HandleSendMessage"
        OnToggleImageGeneration="HandleToggleImageGeneration"
        OnClearMessages="HandleClearMessages"
        OnError="HandleError"
    />
    @if (showModal)
    {
        <Modal
            ImageSrc="@selectedImage"
            OnClose="HandleModalClose"
            OnError="HandleError"
        />
    }
</div>

@code {
    private string userMessage = "";
    private bool isSending = false;
    private bool isGeneratingImage = false;
    private bool isImageLoading = false;
    private List<ChatMessageModel> chats = new List<ChatMessageModel>();
    private List<ChatMessageModel> conversation = new List<ChatMessageModel>();
    private bool showModal = false;
    private string selectedImage = "";
    private string errorMessage = "";
    private string currentRole = "";

    private async Task HandleSendMessage(string message)
    {
        if (string.IsNullOrWhiteSpace(message))
        {
            return;
        }

        var tempUserMessage = message;
        userMessage = string.Empty;
        isSending = true;
        StateHasChanged();

        var userChatMessage = new ChatMessageModel(tempUserMessage, "user");
        chats.Add(userChatMessage);
        conversation.Add(userChatMessage);

        try
        {
            if (isGeneratingImage)
            {
                var loadingMessage = new ChatMessageModel("", "assistant", true, true);
                chats.Add(loadingMessage);
                StateHasChanged();

                await OpenAIService.GenerateImageAsync(tempUserMessage, (imageBytes) =>
                {
                    try
                    {
                        UpdateImageResponse(imageBytes, loadingMessage);
                    }
                    catch (Exception ex)
                    {
                        RemoveLoadingMessage(loadingMessage);
                        UpdateErrorResponse($"Error updating image response: {ex.Message}");
                    }
                }, (error) =>
                {
                    RemoveLoadingMessage(loadingMessage);
                    UpdateErrorResponse(error);
                });
            }
            else
            {
                await OpenAIService.GetChatCompletionStreamingAsync(conversation.Where(c => !c.IsImage).ToList(), tempUserMessage, (update) =>
                {
                    try
                    {
                        UpdateResponse(update);
                    }
                    catch (Exception ex)
                    {
                        UpdateErrorResponse($"Error updating chat response: {ex.Message}");
                    }
                }, () =>
                {
                    CompleteResponse(chats.Last());
                });
            }
        }
        catch (Exception ex)
        {
            HandleError($"Error sending message: {ex.Message}");
        }
        finally
        {
            isSending = false;
            StateHasChanged();
        }
    }

    private void CompleteResponse(ChatMessageModel chatMessage)
    {
        try
        {
            chatMessage.HtmlContent = MarkdownService.ConvertToHtml(chatMessage.Message);
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            HandleError($"Error completing response: {ex.Message}");
        }
    }

    private async Task HandleRoleSelected(string newRolePrompt)
    {
        if (!string.IsNullOrEmpty(currentRole))
        {
            var forgetMessage = new ChatMessageModel("Forget the previous role.", "user");
            conversation.Add(forgetMessage);
        }

        var roleMessage = new ChatMessageModel(newRolePrompt, "system");
        conversation.Add(roleMessage);

        currentRole = newRolePrompt;
        StateHasChanged();
    }

    private void HandleImageGenerated(byte[] imageBytes)
    {
        isImageLoading = false;
        var base64Image = Convert.ToBase64String(imageBytes);
        var imageMessage = new ChatMessageModel(base64Image, "assistant", isImage: true);
        chats.Add(imageMessage);
        conversation.Add(imageMessage);
        StateHasChanged();
    }

    private async Task HandleLoading(bool isLoading)
    {
        isImageLoading = isLoading;
        await InvokeAsync(StateHasChanged);
    }

    private void HandleToggleImageGeneration(bool isGenerating)
    {
        try
        {
            isGeneratingImage = isGenerating;
        }
        catch (Exception ex)
        {
            HandleError($"Error toggling image generation: {ex.Message}");
        }
    }

    private void HandleClearMessages()
    {
        try
        {
            chats.Clear();
            conversation.Clear();
            errorMessage = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            HandleError($"Error clearing messages: {ex.Message}");
        }
    }

    private void HandleError(string message)
    {
        errorMessage = message;
        StateHasChanged();
    }

    private void OpenModal(string imageSrc)
    {
        try
        {
            selectedImage = imageSrc;
            showModal = true;
            StateHasChanged(); // Make sure to update the state
        }
        catch (Exception ex)
        {
            HandleError($"Error opening modal: {ex.Message}");
        }
    }

    private void HandleModalClose()
    {
        try
        {
            showModal = false;
            StateHasChanged(); // Make sure to update the state
        }
        catch (Exception ex)
        {
            HandleError($"Error closing modal: {ex.Message}");
        }
    }

    private void UpdateResponse(string update)
    {
        try
        {
            if (chats.LastOrDefault()?.Role == "assistant")
            {
                chats.Last().Message += update;
            }
            else
            {
                var newMessage = new ChatMessageModel(update, "assistant");
                chats.Add(newMessage);
                conversation.Add(newMessage);
            }
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            HandleError($"Error updating response: {ex.Message}");
        }
    }

    private void UpdateImageResponse(byte[] imageBytes, ChatMessageModel loadingMessage)
    {
        try
        {
            var base64Image = Convert.ToBase64String(imageBytes);
            loadingMessage.Message = base64Image;
            loadingMessage.IsLoading = false;
            conversation.Add(loadingMessage);
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            HandleError($"Error updating image response: {ex.Message}");
        }
    }

    private void UpdateErrorResponse(string error)
    {
        try
        {
            var errorMessageModel = new ChatMessageModel(error, "error");
            errorMessage = error;
            chats.Add(errorMessageModel);
            conversation.Add(errorMessageModel);
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            HandleError($"Error updating error response: {ex.Message}");
        }
    }

    private void RemoveLoadingMessage(ChatMessageModel loadingMessage)
    {
        if (chats.Contains(loadingMessage))
        {
            chats.Remove(loadingMessage);
        }
        InvokeAsync(StateHasChanged);
    }
}