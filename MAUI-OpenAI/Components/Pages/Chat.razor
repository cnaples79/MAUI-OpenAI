@page "/"
@inject IOpenAIService OpenAIService
@inject IMarkdownService MarkdownService
@inject IChatService ChatService

<div class="flex flex-col h-full bg-backdrop text-brightWhite relative">
    <RoleSelector
        @ref="roleSelectorRef"
        IsSendingMessage="@isSendingMessage"
        IsImageLoading="@isImageLoading"
        IsAppearanceLoading="@isAppearanceLoading"
        OnRoleSelected="HandleRoleSelected"
        OnImageGenerated="HandleImageGenerated"
        OnError="HandleError"
        OnLoading="HandleLoading"
        ChatMessageList="@chatMessages"
    />
    <ChatMessages
        ErrorMessage="@errorMessage"
        IsImageLoading="@isImageLoading"
        IsAppearanceLoading="@isAppearanceLoading"
        ChatMessageList="chatMessages"
        OnImageClick="OpenModal"
        OnError="HandleError"
    />
    <ChatInput
        UserMessage="@userMessage"
        IsSendingMessage="@isSendingMessage"
        IsImageGenerationMode="@isImageGenerationMode"
        IsAppearanceLoading="@isAppearanceLoading"
        TokenCount="@tokenCount"
        MaxTokens="@MaxTokens"
        CharactersPerToken="@CharactersPerToken"
        OnSendMessage="HandleSendMessage"
        OnToggleImageGeneration="HandleToggleImageGeneration"
        OnClearMessages="HandleClearMessages"
        OnError="HandleError"
    />
    @if (showModal)
    {
        <Modal
            ImageSrc="@selectedImage"
            OnClose="HandleModalClose"
            OnError="HandleError"
        />
    }
</div>

@code {
    private string userMessage = "";
    private bool isSendingMessage = false;
    private bool isImageLoading = false;
    private bool isAppearanceLoading = false;
    private bool isImageGenerationMode = false;
    private List<ChatMessageModel> chatMessages = new List<ChatMessageModel>();
    private List<ChatMessageModel> conversation = new List<ChatMessageModel>();
    private bool showModal = false;
    private string selectedImage = "";
    private string errorMessage = "";
    private string currentRole = "";
    private RoleSelector roleSelectorRef;

    private const int MaxTokens = 1000;
    private const double CharactersPerToken = 3.5;
    private int tokenCount = 0;

    private EventCallback<string> OnError => EventCallback.Factory.Create<string>(this, HandleError);
    private EventCallback<byte[]> OnImageGenerated => EventCallback.Factory.Create<byte[]>(this, HandleImageGenerated);

    private async Task HandleSendMessage(string message)
    {
        await ChatService.HandleSendMessageAsync(message, chatMessages, conversation, isImageGenerationMode, OpenAIService, MarkdownService, OnError, () => InvokeAsync(StateHasChanged), OnImageGenerated);
    }

    private async Task HandleRoleSelected(string newRolePrompt)
    {
        ChatService.AddForgetPreviousRoleMessage(currentRole, conversation);
        ChatService.AddRoleMessage(newRolePrompt, conversation);

        currentRole = newRolePrompt;
        StateHasChanged();
    }

    private async Task HandleImageGenerated(byte[] imageBytes)
    {
        isImageLoading = false;
        StateHasChanged();
    }

    private async Task HandleLoading(bool isLoading)
    {
        if (isImageGenerationMode)
        {
            isImageLoading = isLoading;
        }
        else
        {
            isAppearanceLoading = isLoading;
        }
        await InvokeAsync(StateHasChanged);
    }

    private void HandleToggleImageGeneration(bool isGenerating)
    {
        try
        {
            isImageGenerationMode = isGenerating;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            HandleError($"Error toggling image generation: {ex.Message}");
        }
    }

    private async Task HandleClearMessages()
    {
        try
        {
            ClearAllMessages();
            await roleSelectorRef.ClearRoleAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            HandleError($"Error clearing messages: {ex.Message}");
        }
    }

    private void ClearAllMessages()
    {
        chatMessages.Clear();
        conversation.Clear();
        errorMessage = "";
    }

    private void HandleError(string message)
    {
        errorMessage = message;
        StateHasChanged();
    }

    private void OpenModal(string imageSrc)
    {
        try
        {
            selectedImage = imageSrc;
            showModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            HandleError($"Error opening modal: {ex.Message}");
        }
    }

    private void HandleModalClose()
    {
        try
        {
            showModal = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            HandleError($"Error closing modal: {ex.Message}");
        }
    }
}