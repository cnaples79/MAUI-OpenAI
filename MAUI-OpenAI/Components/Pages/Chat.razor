@page "/"
@inject IOpenAIService OpenAIService
@using Microsoft.Extensions.Logging
@inject ILogger<Chat> Logger

<div class="flex flex-col h-full bg-backdrop text-brightWhite relative">
    <ChatMessages Chats="chats" OnImageClick="OpenModal" />
    <ChatInput
        UserMessage="@userMessage"
        IsSending="@isSending"
        IsGeneratingImage="@isGeneratingImage"
        OnSendMessage="HandleSendMessage"
        OnToggleImageGeneration="HandleToggleImageGeneration"
        OnClearMessages="HandleClearMessages"
    />
    @if (showModal)
    {
        <Modal ImageSrc="@selectedImage" OnClose="HandleModalClose" />
    }
</div>

@code {
    private string userMessage = "";
    private bool isSending = false;
    private bool isGeneratingImage = false;
    private List<ChatMessageModel> chats = new List<ChatMessageModel>();
    private List<ChatMessageModel> conversation = new List<ChatMessageModel>();
    private bool showModal = false;
    private string selectedImage = "";

    private async Task HandleSendMessage(string message)
    {
        Logger.LogInformation("HandleSendMessage called with message: {message}");
        if (string.IsNullOrWhiteSpace(message))
        {
            Logger.LogWarning("Message is empty or whitespace");
            return;
        }

        var tempUserMessage = message;
        userMessage = string.Empty; // Clear the input field
        isSending = true;
        Logger.LogInformation("Message sending state set to true");
        StateHasChanged();

        var userChatMessage = new ChatMessageModel(tempUserMessage, "user");
        chats.Add(userChatMessage); // Add user message to chats
        conversation.Add(userChatMessage); // Keep the full conversation context

        if (isGeneratingImage)
        {
            var loadingMessage = new ChatMessageModel("", "assistant", true, true);
            chats.Add(loadingMessage);
            StateHasChanged();
            Logger.LogInformation("Image generation initiated");

            await OpenAIService.GenerateImageAsync(tempUserMessage, (imageBytes) =>
            {
                UpdateImageResponse(imageBytes, loadingMessage);
            }, UpdateErrorResponse);
        }
        else
        {
            Logger.LogInformation("Chat completion initiated");
            await OpenAIService.GetChatCompletionStreamingAsync(conversation.Where(c => !c.IsImage).ToList(), tempUserMessage, UpdateResponse);
        }

        isSending = false;
        Logger.LogInformation("Message sending state set to false");
        StateHasChanged();
    }

    private void HandleToggleImageGeneration(bool isGenerating)
    {
        Logger.LogInformation("HandleToggleImageGeneration called with state: {isGenerating}");
        isGeneratingImage = isGenerating;
    }

    private void HandleClearMessages()
    {
        Logger.LogInformation("HandleClearMessages called");
        chats.Clear();
        StateHasChanged();
    }

    private void OpenModal(string imageSrc)
    {
        Logger.LogInformation("OpenModal called with image source: {imageSrc}");
        selectedImage = imageSrc;
        showModal = true;
    }

    private void HandleModalClose()
    {
        Logger.LogInformation("HandleModalClose called");
        showModal = false;
    }

    private void UpdateResponse(string update)
    {
        Logger.LogInformation("UpdateResponse called with update: {update}");
        if (chats.LastOrDefault()?.Role == "assistant")
        {
            chats.Last().Message += update;
        }
        else
        {
            var newMessage = new ChatMessageModel(update, "assistant");
            chats.Add(newMessage);
            conversation.Add(newMessage);
        }
        InvokeAsync(StateHasChanged);
    }

    private void UpdateImageResponse(byte[] imageBytes, ChatMessageModel loadingMessage)
    {
        Logger.LogInformation("UpdateImageResponse called with image bytes length: {length}", imageBytes.Length);
        var base64Image = Convert.ToBase64String(imageBytes);
        loadingMessage.Message = base64Image;
        loadingMessage.IsLoading = false;
        conversation.Add(loadingMessage);
        InvokeAsync(StateHasChanged);
    }

    private void UpdateErrorResponse(string error)
    {
        Logger.LogInformation("UpdateErrorResponse called with error: {error}");
        var errorMessage = new ChatMessageModel(error, "assistant");
        chats.Add(errorMessage);
        conversation.Add(errorMessage);
    }
}
